from NeuralNetwork import NeuralNetwork
from datetime import datetime
import numpy as np



class Autoencoder:
    def __init__(self, input_layer_len, hidden_layer_len, output_layer_len, activation="sigmoid"):
        #impletation of autoencoder
        
        self.activation = activation
        self.input_layer = np.random.uniform(low=0, high=1, size=input_layer_len)
        self.output_layer = np.random.uniform(low=0, high=1, size=output_layer_len)
        self.nn = NeuralNetwork(input_layer=self.input_layer, hidden_size=hidden_layer_len,
                                expected=self.output_layer, activation=activation)
        self.loss_error = []

    def change_activation(self, activation):
        #change activation function.
        
        self.activation = self.nn.change_activation(activation=activation)

    def draw_graph(self, folder_path):
        #draw a graph of a loss function to screen and to file.
        
        import matplotlib.pyplot as plt

        # Data for plotting
        points = np.asarray(self.loss_error) / 1e-9
        epoch = np.arange(0, len(self.loss_error))

        fig, ax = plt.subplots()
        ax.plot(epoch,points)

        ax.set(xlabel='epoch (num)', ylabel='loss function (sum)',
               title='Loss function over epoch.')
        ax.grid()

        fig.savefig("{}/{}.png".format(folder_path, datetime.now().strftime("%Y-%m-%d_%H-%M")))
        plt.show()

    def train(self, train_data, alpha, epoch=1000):
        
       for i in range(epoch):
           #print("starting epoch number: ",i)
           for sample in train_data:
               self.nn.set_input(value=sample)
               self.nn.set_expected(value=sample)
               self.nn.feedforward()
               self.nn.back_propagation(alpha=alpha)
           self.loss_error.append(self.nn.loss_error)    

    def predict(self, predict_val):
        #predict the output the model.
        #return an encoder output in np array     
       
      
        root = path.dirname(path.dirname(__file__))
        out_img = []
        for sample in predict_val:
            # set input layer of nn.
            self.nn.set_input(value=sample)
            # set output layer of nn.
            self.nn.set_expected(value=sample)
            # load weight.
            self.nn.load_weights("{}/data/out".format(root))
            # feedforward.
            out_img.append(self.nn.feedforward())
        return np.array(out_img)

    @staticmethod
    def fit_transform(data_to_fit):
        #fit an image to input layer model as
        #one dimension array
        
       
        return np.asarray([np.ravel(im) for im in data_to_fit], dtype='float64')

    @staticmethod
    def reverse_transform(data_to_fit, size):
        #reverse fit transform.
        
        revers = [im.reshape((size, size)) for im in data_to_fit]
        return np.asarray(revers, dtype='float64')

    @staticmethod
    def train_test_split(data, train_split):
        #split the data randomly.
        
        train_test = []
        if 0 < train_split < 1:
            index = np.random.choice(data.shape[0], int(data.shape[0] * train_split), replace=False)
            for idx in index:
                train_test.append(data[idx])
        return np.asarray(train_test, dtype='float64')

    @staticmethod
    def image_to_np_array(image_path):
        #Change image from binary to numpy array.
        
        from matplotlib.image import imread
        return np.asarray(imread(image_path), dtype='uint8')

    @staticmethod
    def split_row_pixels(row, chunk_size):
        #split row, 1D, to multiply chunks.
       
        return np.array(np.split(np.array(row), chunk_size))

    @staticmethod
    def split_image_chunks(image_path, chunks_size):
        #split the image to chucks to fit the input layer of the nn.
        
        img_ndarray = Autoencoder.image_to_np_array(image_path=image_path)
        chunks = []
        sub_chunks_size = int(img_ndarray.shape[0] / chunks_size)
        for row_pixels in img_ndarray:
            sub_chunk = np.asarray(Autoencoder.split_row_pixels(row=row_pixels, chunk_size=sub_chunks_size))
            chunks.extend(np.split(sub_chunk, sub_chunks_size / chunks_size))
        return np.array(chunks)

    @staticmethod
    def append_image_chunks(np_arr, original_size):
       #appends the chunks from image to fit the to input layer of the nn.
        
        flat_img = np.append([], np_arr)
        return np.array(np.split(flat_img, original_size))

    @staticmethod
    def save_image_from_np(image_np, to_path):
       #save image from numpy array.
       
        
        from matplotlib.image import imsave
        imsave(to_path, image_np.astype('uint8'))

    @staticmethod
    def show_image_from_np(image_np):
        #show image from numpy array.
        
        from matplotlib import pyplot as plt
        plt.figure()
        plt.gray()
        plt.imshow(image_np)
        plt.axis('off')
        plt.show()


if __name__ == '__main__':
    from os import path, makedirs
    from shutil import rmtree

    # root folder path.
    root_folder = path.dirname(path.dirname(__file__))

    
    print("starting model with 8-size chunks:")
    print("starting model:half-size, 500 epochs") #1000
    
    # # chunks size
    chunk_size = 8
    # split the image to small chunks
    print("Splitting the image.")
    data = Autoencoder.split_image_chunks(image_path="{}/data/in/Lenappm.jpeg".format(root_folder),
                                          chunks_size=chunk_size)

    # fit data to input of the model.
    print("fitting the model.")
    flat_train = Autoencoder.fit_transform(data_to_fit=data) / 255.0

    # create a Autoencoder object.
    print("initialing  Neureal Network.")
    input_output_len = chunk_size * chunk_size
    autoencoder = Autoencoder(input_layer_len=input_output_len,
                              hidden_layer_len=int(input_output_len / 2),
                              output_layer_len=input_output_len)

    # train the data.
    print("training ...")
    autoencoder.train(train_data=flat_train, alpha=0.2, epoch=500)                    
    autoencoder.nn.save_weights("{}/data/out".format(root_folder))

    # draw graph.
    print("drawing the graph...")
    autoencoder.draw_graph(folder_path="{}/data/out".format(root_folder))

    # load image to predict.
    print("loading image to predict.")
    np_image = Autoencoder.image_to_np_array(image_path="{}/data/in/Lenappm.jpeg".format(root_folder))

    # split the predict image to small chunks
    print("Splitting image.")
    pred_data = Autoencoder.split_image_chunks(image_path="{}/data/in/Lenappm.jpeg".format(root_folder),
                                               chunks_size=chunk_size)

    # fit data to input of the model.
    print("fitting the chunks to input of the model.")
    pred_flat = Autoencoder.fit_transform(data_to_fit=pred_data) / 255.0

    # predict
    print("predicting image.")
    pred_out = autoencoder.predict(predict_val=pred_flat) * 255

    # reverse fit transform
    pred_out_mult = Autoencoder.reverse_transform(data_to_fit=pred_out, size=chunk_size)

    # appends chunks to one image.
    img_data = Autoencoder.append_image_chunks(np_arr=pred_out_mult, original_size=512).astype('uint8')

    # show image.    
    Autoencoder.show_image_from_np(image_np=img_data)
    image_path="{}/data/in/Lenappm.jpeg".format(root_folder)
    im=Autoencoder.image_to_np_array(image_path)
    Autoencoder.show_image_from_np(image_np=im)
    # save image.
    Autoencoder.save_image_from_np(image_np=img_data,
                                   to_path="{0}/data/out/predicted_{1}.png"
                                   .format(root_folder, datetime.now().strftime("l%Y-%m-%d_%H-%M")))
     
    print("loading image to predict.")
    np_image = Autoencoder.image_to_np_array(image_path="{}/data/in/cat.jpeg".format(root_folder))

    # split the predict image to small chunks
    print("Splitting image.")
    pred_data = Autoencoder.split_image_chunks(image_path="{}/data/in/cat.jpeg".format(root_folder),
                                               chunks_size=chunk_size)

    # fit data to input of the model.
    print("fitting the chunks to input of the model.")
    pred_flat = Autoencoder.fit_transform(data_to_fit=pred_data) / 255.0

    # predict
    print("predicting image.")
    pred_out = autoencoder.predict(predict_val=pred_flat) * 255

    # reverse fit transform
    pred_out_mult = Autoencoder.reverse_transform(data_to_fit=pred_out, size=chunk_size)

    # appends chunks to one image.
    img_data = Autoencoder.append_image_chunks(np_arr=pred_out_mult, original_size=512).astype('uint8')

    # show image.    
    Autoencoder.show_image_from_np(image_np=img_data)
    image_path="{}/data/in/cat.jpeg".format(root_folder)
    im=Autoencoder.image_to_np_array(image_path)
    Autoencoder.show_image_from_np(image_np=im)
    # save image.
    Autoencoder.save_image_from_np(image_np=img_data,
                                   to_path="{0}/data/out/predicted_{1}.png"
                                   .format(root_folder, datetime.now().strftime("c%Y-%m-%d_%H-%M")))
    """ not working on my computer     
    print("loading image to predict.")
    np_image = Autoencoder.image_to_np_array(image_path="{}/data/in/h.jpeg".format(root_folder))

    # split the predict image to small chunks
    print("Splitting image.")
    pred_data = Autoencoder.split_image_chunks(image_path="{}/data/in/h.jpeg".format(root_folder),
                                               chunks_size=chunk_size)

    # fit data to input of the model.
    print("fitting the chunks to input of the model.")
    pred_flat = Autoencoder.fit_transform(data_to_fit=pred_data) / 255.0

    # predict
    print("predicting image.")
    pred_out = autoencoder.predict(predict_val=pred_flat) * 255

    # reverse fit transform
    pred_out_mult = Autoencoder.reverse_transform(data_to_fit=pred_out, size=chunk_size)

    # appends chunks to one image.
    img_data = Autoencoder.append_image_chunks(np_arr=pred_out_mult, original_size=512).astype('uint8')

    # show image.   
    Autoencoder.show_image_from_np(image_np=img_data)
    image_path="{}/data/in/h.jpeg".format(root_folder)
    im=Autoencoder.image_to_np_array(image_path)
    Autoencoder.show_image_from_np(image_np=im)
    # save image.
    Autoencoder.save_image_from_np(image_np=img_data,
                                   to_path="{0}/data/out/predicted_{1}.png"
                                   .format(root_folder, datetime.now().strftime("%Y-%m-%d_%H-%M")))
    """

        
    print("#################################################")
    print("starting model: 16-size chunks")
    print("starting model 1: half-size, 10 epochs")

    # # chunks size
    chunk_size = 16
    # split the image to small chunks
    print("Splitting the image.")
    data = Autoencoder.split_image_chunks(image_path="{}/data/in/Lenappm.jpeg".format(root_folder),
                                          chunks_size=chunk_size)

    # fit data to input of the model.
    print("fitting the model.")
    flat_train = Autoencoder.fit_transform(data_to_fit=data) / 255.0

    # create a Autoencoder object.
    print("initialing  Neureal Network.")
    input_output_len = chunk_size * chunk_size
    autoencoder = Autoencoder(input_layer_len=input_output_len,
                              hidden_layer_len=int(input_output_len / 2),
                              output_layer_len=input_output_len)

    # train the data.
    print("training ...")
    autoencoder.train(train_data=flat_train, alpha=0.2, epoch=10)                    
    autoencoder.nn.save_weights("{}/data/out".format(root_folder))

    # draw graph.
    print("drawing the graph...")
    autoencoder.draw_graph(folder_path="{}/data/out".format(root_folder))

    # load image to predict.
    print("loading image to predict.")
    np_image = Autoencoder.image_to_np_array(image_path="{}/data/in/Lenappm.jpeg".format(root_folder))

    # split the predict image to small chunks
    print("Splitting image.")
    pred_data = Autoencoder.split_image_chunks(image_path="{}/data/in/Lenappm.jpeg".format(root_folder),
                                               chunks_size=chunk_size)

    # fit data to input of the model.
    print("fitting the chunks to input of the model.")
    pred_flat = Autoencoder.fit_transform(data_to_fit=pred_data) / 255.0

    # predict
    print("predicting image.")
    pred_out = autoencoder.predict(predict_val=pred_flat) * 255

    # reverse fit transform
    pred_out_mult = Autoencoder.reverse_transform(data_to_fit=pred_out, size=chunk_size)

    # appends chunks to one image.
    img_data = Autoencoder.append_image_chunks(np_arr=pred_out_mult, original_size=512).astype('uint8')

    # show image.    
    Autoencoder.show_image_from_np(image_np=img_data)
    image_path="{}/data/in/Lenappm.jpeg".format(root_folder)
    im=Autoencoder.image_to_np_array(image_path)
    Autoencoder.show_image_from_np(image_np=im)
    # save image.
    Autoencoder.save_image_from_np(image_np=img_data,
                                   to_path="{0}/data/out/predicted_{1}.png"
                                   .format(root_folder, datetime.now().strftime("l%Y-%m-%d_%H-%M")))
     
    print("loading image to predict.")
    np_image = Autoencoder.image_to_np_array(image_path="{}/data/in/cat.jpeg".format(root_folder))

    # split the predict image to small chunks
    print("Splitting image.")
    pred_data = Autoencoder.split_image_chunks(image_path="{}/data/in/cat.jpeg".format(root_folder),
                                               chunks_size=chunk_size)

    # fit data to input of the model.
    print("fitting the chunks to input of the model.")
    pred_flat = Autoencoder.fit_transform(data_to_fit=pred_data) / 255.0

    # predict
    print("predicting image.")
    pred_out = autoencoder.predict(predict_val=pred_flat) * 255

    # reverse fit transform
    pred_out_mult = Autoencoder.reverse_transform(data_to_fit=pred_out, size=chunk_size)

    # appends chunks to one image.
    img_data = Autoencoder.append_image_chunks(np_arr=pred_out_mult, original_size=512).astype('uint8')

    # show image.   
    Autoencoder.show_image_from_np(image_np=img_data)
    image_path="{}/data/in/cat.jpeg".format(root_folder)
    im=Autoencoder.image_to_np_array(image_path)
    Autoencoder.show_image_from_np(image_np=im)
    # save image.
    Autoencoder.save_image_from_np(image_np=img_data,
                                   to_path="{0}/data/out/predicted_{1}.png"
                                   .format(root_folder, datetime.now().strftime("c%Y-%m-%d_%H-%M")))
    """ not working on my computer   
    print("loading image to predict.")
    np_image = Autoencoder.image_to_np_array(image_path="{}/data/in/h.jpeg".format(root_folder))

    # split the predict image to small chunks
    print("Splitting image.")
    pred_data = Autoencoder.split_image_chunks(image_path="{}/data/in/h.jpeg".format(root_folder),
                                               chunks_size=chunk_size)

    # fit data to input of the model.
    print("fitting the chunks to input of the model.")
    pred_flat = Autoencoder.fit_transform(data_to_fit=pred_data) / 255.0

    # predict
    print("predicting image.")
    pred_out = autoencoder.predict(predict_val=pred_flat) * 255

    # reverse fit transform
    pred_out_mult = Autoencoder.reverse_transform(data_to_fit=pred_out, size=chunk_size)

    # appends chunks to one image.
    img_data = Autoencoder.append_image_chunks(np_arr=pred_out_mult, original_size=512).astype('uint8')

    # show image.
    Autoencoder.show_image_from_np(image_np=img_data)
    image_path="{}/data/in/h.jpeg".format(root_folder)
    im=Autoencoder.image_to_np_array(image_path)
    Autoencoder.show_image_from_np(image_np=im)
    # save image.
    Autoencoder.save_image_from_np(image_np=img_data,
                                   to_path="{0}/data/out/predicted_{1}.png"
                                   .format(root_folder, datetime.now().strftime("%Y-%m-%d_%H-%M")))
    """         
    print("model 2: half size 100 epoch")
        
    print("initialing  Neureal Network.")
    input_output_len = chunk_size * chunk_size
    autoencoder = Autoencoder(input_layer_len=input_output_len,
                              hidden_layer_len=int(input_output_len / 2),
                              output_layer_len=input_output_len)

    # train the data.
    print("training ...")
    autoencoder.train(train_data=flat_train, alpha=0.2, epoch=100)
                     
    autoencoder.nn.save_weights("{}/data/out".format(root_folder))

    # draw graph.
    print("drawing the graph...")
    autoencoder.draw_graph(folder_path="{}/data/out".format(root_folder))

    # load image to predict.
    print("loading image to predict.")
    np_image = Autoencoder.image_to_np_array(image_path="{}/data/in/Lenappm.jpeg".format(root_folder))

    # split the predict image to small chunks
    print("Splitting image.")
    pred_data = Autoencoder.split_image_chunks(image_path="{}/data/in/Lenappm.jpeg".format(root_folder),
                                               chunks_size=chunk_size)

    # fit data to input of the model.
    print("fitting the chunks to input of the model.")
    pred_flat = Autoencoder.fit_transform(data_to_fit=pred_data) / 255.0

    # predict
    print("predicting image.")
    pred_out = autoencoder.predict(predict_val=pred_flat) * 255

    # reverse fit transform
    pred_out_mult = Autoencoder.reverse_transform(data_to_fit=pred_out, size=chunk_size)

    # appends chunks to one image.
    img_data = Autoencoder.append_image_chunks(np_arr=pred_out_mult, original_size=512).astype('uint8')

    # show image.
    
    Autoencoder.show_image_from_np(image_np=img_data)
    image_path="{}/data/in/Lenappm.jpeg".format(root_folder)
    im=Autoencoder.image_to_np_array(image_path)
    Autoencoder.show_image_from_np(image_np=im)
    # save image.
    Autoencoder.save_image_from_np(image_np=img_data,
                                   to_path="{0}/data/out/predicted_{1}.png"
                                   .format(root_folder, datetime.now().strftime("l%Y-%m-%d_%H-%M")))
    
    
    print("loading image to predict.")
    np_image = Autoencoder.image_to_np_array(image_path="{}/data/in/cat.jpeg".format(root_folder))

    # split the predict image to small chunks
    print("Splitting image.")
    pred_data = Autoencoder.split_image_chunks(image_path="{}/data/in/cat.jpeg".format(root_folder),
                                               chunks_size=chunk_size)

    # fit data to input of the model.
    print("fitting the chunks to input of the model.")
    pred_flat = Autoencoder.fit_transform(data_to_fit=pred_data) / 255.0

    # predict
    print("predicting image.")
    pred_out = autoencoder.predict(predict_val=pred_flat) * 255

    # reverse fit transform
    pred_out_mult = Autoencoder.reverse_transform(data_to_fit=pred_out, size=chunk_size)

    # appends chunks to one image.
    img_data = Autoencoder.append_image_chunks(np_arr=pred_out_mult, original_size=512).astype('uint8')

    # show image.    
    Autoencoder.show_image_from_np(image_np=img_data)
    image_path="{}/data/in/cat.jpeg".format(root_folder)
    im=Autoencoder.image_to_np_array(image_path)
    Autoencoder.show_image_from_np(image_np=im)
    # save image.
    Autoencoder.save_image_from_np(image_np=img_data,
                                   to_path="{0}/data/out/predicted_{1}.png"
                                   .format(root_folder, datetime.now().strftime("c%Y-%m-%d_%H-%M")))
    """ not working on my computer   
    print("loading image to predict.")
    np_image = Autoencoder.image_to_np_array(image_path="{}/data/in/h.jpeg".format(root_folder))

    # split the predict image to small chunks
    print("Splitting image.")
    pred_data = Autoencoder.split_image_chunks(image_path="{}/data/in/h.jpeg".format(root_folder),
                                               chunks_size=chunk_size)

    # fit data to input of the model.
    print("fitting the chunks to input of the model.")
    pred_flat = Autoencoder.fit_transform(data_to_fit=pred_data) / 255.0

    # predict
    print("predicting image.")
    pred_out = autoencoder.predict(predict_val=pred_flat) * 255

    # reverse fit transform
    pred_out_mult = Autoencoder.reverse_transform(data_to_fit=pred_out, size=chunk_size)

    # appends chunks to one image.
    img_data = Autoencoder.append_image_chunks(np_arr=pred_out_mult, original_size=512).astype('uint8')

    # show image.
    Autoencoder.show_image_from_np(image_np=img_data)
    image_path="{}/data/in/h.jpeg".format(root_folder)
    im=Autoencoder.image_to_np_array(image_path)
    Autoencoder.show_image_from_np(image_np=im)
    # save image.
    Autoencoder.save_image_from_np(image_np=img_data,
                                   to_path="{0}/data/out/predicted_{1}.png"
                                   .format(root_folder, datetime.now().strftime("%Y-%m-%d_%H-%M")))
    """
    print("model 3: half size 600 epoch") #1000
    
    print("initialing  Neureal Network.")
    input_output_len = chunk_size * chunk_size
    autoencoder = Autoencoder(input_layer_len=input_output_len,
                              hidden_layer_len=int(input_output_len / 2),
                              output_layer_len=input_output_len)

    # train the data.
    print("training ...")
    autoencoder.train(train_data=flat_train, alpha=0.2, epoch=600)
                     
    autoencoder.nn.save_weights("{}/data/out".format(root_folder))

    # draw graph.
    print("drawing the graph...")
    autoencoder.draw_graph(folder_path="{}/data/out".format(root_folder))

    # load image to predict.
    print("loading image to predict.")
    np_image = Autoencoder.image_to_np_array(image_path="{}/data/in/Lenappm.jpeg".format(root_folder))

    # split the predict image to small chunks
    print("Splitting image.")
    pred_data = Autoencoder.split_image_chunks(image_path="{}/data/in/Lenappm.jpeg".format(root_folder),
                                               chunks_size=chunk_size)

    # fit data to input of the model.
    print("fitting the chunks to input of the model.")
    pred_flat = Autoencoder.fit_transform(data_to_fit=pred_data) / 255.0

    # predict
    print("predicting image.")
    pred_out = autoencoder.predict(predict_val=pred_flat) * 255

    # reverse fit transform
    pred_out_mult = Autoencoder.reverse_transform(data_to_fit=pred_out, size=chunk_size)

    # appends chunks to one image.
    img_data = Autoencoder.append_image_chunks(np_arr=pred_out_mult, original_size=512).astype('uint8')

    # show image.
    
    Autoencoder.show_image_from_np(image_np=img_data)
    image_path="{}/data/in/Lenappm.jpeg".format(root_folder)
    im=Autoencoder.image_to_np_array(image_path)
    Autoencoder.show_image_from_np(image_np=im)
    # save image.
    Autoencoder.save_image_from_np(image_np=img_data,
                                   to_path="{0}/data/out/predicted_{1}.png"
                                   .format(root_folder, datetime.now().strftime("l%Y-%m-%d_%H-%M")))
    
    
    print("loading image to predict.")
    np_image = Autoencoder.image_to_np_array(image_path="{}/data/in/cat.jpeg".format(root_folder))

    # split the predict image to small chunks
    print("Splitting image.")
    pred_data = Autoencoder.split_image_chunks(image_path="{}/data/in/cat.jpeg".format(root_folder),
                                               chunks_size=chunk_size)

    # fit data to input of the model.
    print("fitting the chunks to input of the model.")
    pred_flat = Autoencoder.fit_transform(data_to_fit=pred_data) / 255.0

    # predict
    print("predicting image.")
    pred_out = autoencoder.predict(predict_val=pred_flat) * 255

    # reverse fit transform
    pred_out_mult = Autoencoder.reverse_transform(data_to_fit=pred_out, size=chunk_size)

    # appends chunks to one image.
    img_data = Autoencoder.append_image_chunks(np_arr=pred_out_mult, original_size=512).astype('uint8')

    # show image.
    
    Autoencoder.show_image_from_np(image_np=img_data)
    image_path="{}/data/in/cat.jpeg".format(root_folder)
    im=Autoencoder.image_to_np_array(image_path)
    Autoencoder.show_image_from_np(image_np=im)
    # save image.
    Autoencoder.save_image_from_np(image_np=img_data,
                                   to_path="{0}/data/out/predicted_{1}.png"
                                   .format(root_folder, datetime.now().strftime("c%Y-%m-%d_%H-%M")))
    
    
    """ not working on my computer
    print("loading image to predict.")
    np_image = Autoencoder.image_to_np_array(image_path="{}/data/in/h.jpeg".format(root_folder))

    # split the predict image to small chunks
    print("Splitting image.")
    pred_data = Autoencoder.split_image_chunks(image_path="{}/data/in/h.jpeg".format(root_folder),
                                               chunks_size=chunk_size)

    # fit data to input of the model.
    print("fitting the chunks to input of the model.")
    pred_flat = Autoencoder.fit_transform(data_to_fit=pred_data) / 255.0

    # predict
    print("predicting image.")
    pred_out = autoencoder.predict(predict_val=pred_flat) * 255

    # reverse fit transform
    pred_out_mult = Autoencoder.reverse_transform(data_to_fit=pred_out, size=chunk_size)

    # appends chunks to one image.
    img_data = Autoencoder.append_image_chunks(np_arr=pred_out_mult, original_size=512).astype('uint8')

    # show image.    
    Autoencoder.show_image_from_np(image_np=img_data)
    image_path="{}/data/in/h.jpeg".format(root_folder)
    im=Autoencoder.image_to_np_array(image_path)
    Autoencoder.show_image_from_np(image_np=im)
    # save image.
    Autoencoder.save_image_from_np(image_np=img_data,
                                   to_path="{0}/data/out/predicted_{1}.png"
                                   .format(root_folder, datetime.now().strftime("%Y-%m-%d_%H-%M")))
    """
    print("############################################")
    print("model 4: third size, 10 epoch")
        
    print("initialing  Neureal Network.")
    input_output_len = chunk_size * chunk_size
    autoencoder = Autoencoder(input_layer_len=input_output_len,
                              hidden_layer_len=int(input_output_len / 3),
                              output_layer_len=input_output_len)

    # train the data.
    print("training ...")
    autoencoder.train(train_data=flat_train, alpha=0.2, epoch=10)
                     
    autoencoder.nn.save_weights("{}/data/out".format(root_folder))

    # draw graph.
    print("drawing the graph...")
    autoencoder.draw_graph(folder_path="{}/data/out".format(root_folder))

    # load image to predict.
    print("loading image to predict.")
    np_image = Autoencoder.image_to_np_array(image_path="{}/data/in/Lenappm.jpeg".format(root_folder))

    # split the predict image to small chunks
    print("Splitting image.")
    pred_data = Autoencoder.split_image_chunks(image_path="{}/data/in/Lenappm.jpeg".format(root_folder),
                                               chunks_size=chunk_size)

    # fit data to input of the model.
    print("fitting the chunks to input of the model.")
    pred_flat = Autoencoder.fit_transform(data_to_fit=pred_data) / 255.0

    # predict
    print("predicting image.")
    pred_out = autoencoder.predict(predict_val=pred_flat) * 255

    # reverse fit transform
    pred_out_mult = Autoencoder.reverse_transform(data_to_fit=pred_out, size=chunk_size)

    # appends chunks to one image.
    img_data = Autoencoder.append_image_chunks(np_arr=pred_out_mult, original_size=512).astype('uint8')

    # show image.   
    Autoencoder.show_image_from_np(image_np=img_data)
    image_path="{}/data/in/Lenappm.jpeg".format(root_folder)
    im=Autoencoder.image_to_np_array(image_path)
    Autoencoder.show_image_from_np(image_np=im)
    # save image.
    Autoencoder.save_image_from_np(image_np=img_data,
                                   to_path="{0}/data/out/predicted_{1}.png"
                                   .format(root_folder, datetime.now().strftime("l%Y-%m-%d_%H-%M")))
    
    
    print("loading image to predict.")
    np_image = Autoencoder.image_to_np_array(image_path="{}/data/in/cat.jpeg".format(root_folder))

    # split the predict image to small chunks
    print("Splitting image.")
    pred_data = Autoencoder.split_image_chunks(image_path="{}/data/in/cat.jpeg".format(root_folder),
                                               chunks_size=chunk_size)

    # fit data to input of the model.
    print("fitting the chunks to input of the model.")
    pred_flat = Autoencoder.fit_transform(data_to_fit=pred_data) / 255.0

    # predict
    print("predicting image.")
    pred_out = autoencoder.predict(predict_val=pred_flat) * 255

    # reverse fit transform
    pred_out_mult = Autoencoder.reverse_transform(data_to_fit=pred_out, size=chunk_size)

    # appends chunks to one image.
    img_data = Autoencoder.append_image_chunks(np_arr=pred_out_mult, original_size=512).astype('uint8')

    # show image.    
    Autoencoder.show_image_from_np(image_np=img_data)
    image_path="{}/data/in/cat.jpeg".format(root_folder)
    im=Autoencoder.image_to_np_array(image_path)
    Autoencoder.show_image_from_np(image_np=im)
    # save image.
    Autoencoder.save_image_from_np(image_np=img_data,
                                   to_path="{0}/data/out/predicted_{1}.png"
                                   .format(root_folder, datetime.now().strftime("c%Y-%m-%d_%H-%M")))
    """ not working on my computer   
    print("loading image to predict.")
    np_image = Autoencoder.image_to_np_array(image_path="{}/data/in/h.jpeg".format(root_folder))

    # split the predict image to small chunks
    print("Splitting image.")
    pred_data = Autoencoder.split_image_chunks(image_path="{}/data/in/h.jpeg".format(root_folder),
                                               chunks_size=chunk_size)

    # fit data to input of the model.
    print("fitting the chunks to input of the model.")
    pred_flat = Autoencoder.fit_transform(data_to_fit=pred_data) / 255.0

    # predict
    print("predicting image.")
    pred_out = autoencoder.predict(predict_val=pred_flat) * 255

    # reverse fit transform
    pred_out_mult = Autoencoder.reverse_transform(data_to_fit=pred_out, size=chunk_size)

    # appends chunks to one image.
    img_data = Autoencoder.append_image_chunks(np_arr=pred_out_mult, original_size=512).astype('uint8')

    # show image.   
    Autoencoder.show_image_from_np(image_np=img_data)
    image_path="{}/data/in/h.jpeg".format(root_folder)
    im=Autoencoder.image_to_np_array(image_path)
    Autoencoder.show_image_from_np(image_np=im)
    # save image.
    Autoencoder.save_image_from_np(image_np=img_data,
                                   to_path="{0}/data/out/predicted_{1}.png"
                                   .format(root_folder, datetime.now().strftime("%Y-%m-%d_%H-%M")))
    """
    print("model 5: third-size ,100 epoch")
    print("initialing  Neureal Network.")
    input_output_len = chunk_size * chunk_size
    autoencoder = Autoencoder(input_layer_len=input_output_len,
                              hidden_layer_len=int(input_output_len / 3),
                              output_layer_len=input_output_len)

    # train the data.
    print("training ...")
    autoencoder.train(train_data=flat_train, alpha=0.2, epoch=100)
                     
    autoencoder.nn.save_weights("{}/data/out".format(root_folder))

    # draw graph.
    print("drawing the graph...")
    autoencoder.draw_graph(folder_path="{}/data/out".format(root_folder))

    # load image to predict.
    print("loading image to predict.")
    np_image = Autoencoder.image_to_np_array(image_path="{}/data/in/Lenappm.jpeg".format(root_folder))

    # split the predict image to small chunks
    print("Splitting image.")
    pred_data = Autoencoder.split_image_chunks(image_path="{}/data/in/Lenappm.jpeg".format(root_folder),
                                               chunks_size=chunk_size)

    # fit data to input of the model.
    print("fitting the chunks to input of the model.")
    pred_flat = Autoencoder.fit_transform(data_to_fit=pred_data) / 255.0

    # predict
    print("predicting image.")
    pred_out = autoencoder.predict(predict_val=pred_flat) * 255

    # reverse fit transform
    pred_out_mult = Autoencoder.reverse_transform(data_to_fit=pred_out, size=chunk_size)

    # appends chunks to one image.
    img_data = Autoencoder.append_image_chunks(np_arr=pred_out_mult, original_size=512).astype('uint8')

    # show image.
    
    Autoencoder.show_image_from_np(image_np=img_data)
    image_path="{}/data/in/Lenappm.jpeg".format(root_folder)
    im=Autoencoder.image_to_np_array(image_path)
    Autoencoder.show_image_from_np(image_np=im)
    # save image.
    Autoencoder.save_image_from_np(image_np=img_data,
                                   to_path="{0}/data/out/predicted_{1}.png"
                                   .format(root_folder, datetime.now().strftime("l%Y-%m-%d_%H-%M")))
    
    
    print("loading image to predict.")
    np_image = Autoencoder.image_to_np_array(image_path="{}/data/in/cat.jpeg".format(root_folder))

    # split the predict image to small chunks
    print("Splitting image.")
    pred_data = Autoencoder.split_image_chunks(image_path="{}/data/in/cat.jpeg".format(root_folder),
                                               chunks_size=chunk_size)

    # fit data to input of the model.
    print("fitting the chunks to input of the model.")
    pred_flat = Autoencoder.fit_transform(data_to_fit=pred_data) / 255.0

    # predict
    print("predicting image.")
    pred_out = autoencoder.predict(predict_val=pred_flat) * 255

    # reverse fit transform
    pred_out_mult = Autoencoder.reverse_transform(data_to_fit=pred_out, size=chunk_size)

    # appends chunks to one image.
    img_data = Autoencoder.append_image_chunks(np_arr=pred_out_mult, original_size=512).astype('uint8')

    # show image.    
    Autoencoder.show_image_from_np(image_np=img_data)
    image_path="{}/data/in/cat.jpeg".format(root_folder)
    im=Autoencoder.image_to_np_array(image_path)
    Autoencoder.show_image_from_np(image_np=im)
    # save image.
    Autoencoder.save_image_from_np(image_np=img_data,
                                   to_path="{0}/data/out/predicted_{1}.png"
                                   .format(root_folder, datetime.now().strftime("c%Y-%m-%d_%H-%M")))
    """ not working on my computer   
    print("loading image to predict.")
    np_image = Autoencoder.image_to_np_array(image_path="{}/data/in/h.jpeg".format(root_folder))

    # split the predict image to small chunks
    print("Splitting image.")
    pred_data = Autoencoder.split_image_chunks(image_path="{}/data/in/h.jpeg".format(root_folder),
                                               chunks_size=chunk_size)

    # fit data to input of the model.
    print("fitting the chunks to input of the model.")
    pred_flat = Autoencoder.fit_transform(data_to_fit=pred_data) / 255.0

    # predict
    print("predicting image.")
    pred_out = autoencoder.predict(predict_val=pred_flat) * 255

    # reverse fit transform
    pred_out_mult = Autoencoder.reverse_transform(data_to_fit=pred_out, size=chunk_size)

    # appends chunks to one image.
    img_data = Autoencoder.append_image_chunks(np_arr=pred_out_mult, original_size=512).astype('uint8')

    # show image.
    
    Autoencoder.show_image_from_np(image_np=img_data)
    image_path="{}/data/in/h.jpeg".format(root_folder)
    im=Autoencoder.image_to_np_array(image_path)
    Autoencoder.show_image_from_np(image_np=im)
    # save image.
    Autoencoder.save_image_from_np(image_np=img_data,
                                   to_path="{0}/data/out/predicted_{1}.png"
                                   .format(root_folder, datetime.now().strftime("%Y-%m-%d_%H-%M")))
    """
    print("model 6: third size 800 epoch") #1000
    print("initialing  Neureal Network.")
    input_output_len = chunk_size * chunk_size
    autoencoder = Autoencoder(input_layer_len=input_output_len,
                              hidden_layer_len=int(input_output_len / 3),
                              output_layer_len=input_output_len)

    # train the data.
    print("training ...")
    autoencoder.train(train_data=flat_train, alpha=0.2, epoch=800)
                     
    autoencoder.nn.save_weights("{}/data/out".format(root_folder))

    # draw graph.
    print("drawing the graph...")
    autoencoder.draw_graph(folder_path="{}/data/out".format(root_folder))

    # load image to predict.
    print("loading image to predict.")
    np_image = Autoencoder.image_to_np_array(image_path="{}/data/in/Lenappm.jpeg".format(root_folder))

    # split the predict image to small chunks
    print("Splitting image.")
    pred_data = Autoencoder.split_image_chunks(image_path="{}/data/in/Lenappm.jpeg".format(root_folder),
                                               chunks_size=chunk_size)

    # fit data to input of the model.
    print("fitting the chunks to input of the model.")
    pred_flat = Autoencoder.fit_transform(data_to_fit=pred_data) / 255.0

    # predict
    print("predicting image.")
    pred_out = autoencoder.predict(predict_val=pred_flat) * 255

    # reverse fit transform
    pred_out_mult = Autoencoder.reverse_transform(data_to_fit=pred_out, size=chunk_size)

    # appends chunks to one image.
    img_data = Autoencoder.append_image_chunks(np_arr=pred_out_mult, original_size=512).astype('uint8')

    # show image.
    
    Autoencoder.show_image_from_np(image_np=img_data)
    image_path="{}/data/in/Lenappm.jpeg".format(root_folder)
    im=Autoencoder.image_to_np_array(image_path)
    Autoencoder.show_image_from_np(image_np=im)
    # save image.
    Autoencoder.save_image_from_np(image_np=img_data,
                                   to_path="{0}/data/out/predicted_{1}.png"
                                   .format(root_folder, datetime.now().strftime("l%Y-%m-%d_%H-%M")))
    
    
    print("loading image to predict.")
    np_image = Autoencoder.image_to_np_array(image_path="{}/data/in/cat.jpeg".format(root_folder))

    # split the predict image to small chunks
    print("Splitting image.")
    pred_data = Autoencoder.split_image_chunks(image_path="{}/data/in/cat.jpeg".format(root_folder),
                                               chunks_size=chunk_size)

    # fit data to input of the model.
    print("fitting the chunks to input of the model.")
    pred_flat = Autoencoder.fit_transform(data_to_fit=pred_data) / 255.0

    # predict
    print("predicting image.")
    pred_out = autoencoder.predict(predict_val=pred_flat) * 255

    # reverse fit transform
    pred_out_mult = Autoencoder.reverse_transform(data_to_fit=pred_out, size=chunk_size)

    # appends chunks to one image.
    img_data = Autoencoder.append_image_chunks(np_arr=pred_out_mult, original_size=512).astype('uint8')

    # show image.   
    Autoencoder.show_image_from_np(image_np=img_data)
    image_path="{}/data/in/cat.jpeg".format(root_folder)
    im=Autoencoder.image_to_np_array(image_path)
    Autoencoder.show_image_from_np(image_np=im)
    # save image.
    Autoencoder.save_image_from_np(image_np=img_data,
                                   to_path="{0}/data/out/predicted_{1}.png"
                                   .format(root_folder, datetime.now().strftime("c%Y-%m-%d_%H-%M")))
    
    """  not working on my computer  
    print("loading image to predict.")
    np_image = Autoencoder.image_to_np_array(image_path="{}/data/in/h.jpeg".format(root_folder))

    # split the predict image to small chunks
    print("Splitting image.")
    pred_data = Autoencoder.split_image_chunks(image_path="{}/data/in/h.jpeg".format(root_folder),
                                               chunks_size=chunk_size)

    # fit data to input of the model.
    print("fitting the chunks to input of the model.")
    pred_flat = Autoencoder.fit_transform(data_to_fit=pred_data) / 255.0

    # predict
    print("predicting image.")
    pred_out = autoencoder.predict(predict_val=pred_flat) * 255

    # reverse fit transform
    pred_out_mult = Autoencoder.reverse_transform(data_to_fit=pred_out, size=chunk_size)

    # appends chunks to one image.
    img_data = Autoencoder.append_image_chunks(np_arr=pred_out_mult, original_size=512).astype('uint8')

    # show image.    
    Autoencoder.show_image_from_np(image_np=img_data)
    image_path="{}/data/in/h.jpeg".format(root_folder)
    im=Autoencoder.image_to_np_array(image_path)
    Autoencoder.show_image_from_np(image_np=im)
    # save image.
    Autoencoder.save_image_from_np(image_np=img_data,
                                   to_path="{0}/data/out/predicted_{1}.png"
                                   .format(root_folder, datetime.now().strftime("%Y-%m-%d_%H-%M")))
    """
